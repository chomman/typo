#+HTML: <h1>Typo <sub><sub><sub>TypeScript Boilerplate</sub></sub></sub></h1>
[[https://travis-ci.org/jupl/typo][file:https://img.shields.io/travis/jupl/typo/client.svg?label=travis&style=flat-square]]
[[https://david-dm.org/jupl/typo/client][file:https://img.shields.io/david/jupl/typo/client.svg?style=flat-square]]
[[https://david-dm.org/jupl/typo/client?type=dev][file:https://img.shields.io/david/dev/jupl/typo/client.svg?style=flat-square]]

** Table of Contents
- [[#about][About]]
- [[#prerequisites][Prerequisites]]
- [[#getting-started][Getting Started]]
- [[#project-structure][Project Structure]]
- [[#tasks][Tasks]]
- [[#project-resources][Project Resources]]

** About
This is a boilerplate project for developing client-side code using [[https://www.typescriptlang.org/][TypeScript]] and [[https://webpack.js.org/][Webpack]].

^{[[#typo-typescript-boilerplate][Back to top]]}

** Prerequisites
- [[https://nodejs.org/en/][Node.js]] (6.x minimum required)
  - [[https://docs.npmjs.com/cli/npm][npm CLI]] is usually included with Node.js
- [[https://yarnpkg.com/en/docs/install][Yarn]] (recommended)
- Editor with support for TypeScript, [[https://palantir.github.io/tslint/][TSLint]], and [[http://editorconfig.org/][EditorConfig]] (ex. [[https://code.visualstudio.com/][Visual Studio Code]])

^{[[#typo-typescript-boilerplate][Back to top]]}

** Getting Started
1. Clone/download this repository.
2. Install dependencies using npm *or* Yarn:
  - =npm install=
  - =yarn=
3. Start running tasks as described below in the [[#tasks][tasks section]].

^{[[#typo-typescript-boilerplate][Back to top]]}

** Project structure
*** Overview
#+BEGIN_EXAMPLE
typo/
├─ coverage/         # Code coverage reports
├─ dist/assets/      # Result assets from build tasks
├─ src/              # Source code
│  ├─ assets/        # Static files and entry points to include in builds
│  │  └─ index.ts    # An application entry point
│  ├─ common/        # Shared domain
│  └─ webpack/       # Webpack related code
│     ├─ config/     # Webpack build configurations
│     ├─ plugin/     # Webpack plugins
│     └─ server.ts   # Local development server
├─ declarations.d.ts # TypeScript declarations
├─ package.json      # Configuration, tasks, and dependencies
├─ setup-tests.ts    # Code that runs before tests are run
├─ tsconfig.json     # TypeScript configuration
├─ tslint.json       # TypeScript linting rules
├─ webpack.config.ts # Webpack build configuration
└─ yarn.lock         # Dependency pinning from Yarn
#+END_EXAMPLE
*** Entry Points
When TypeScript code is built, any files directly inside the =src/assets/= directory are used to create the output files. The boilerplate currently generates =index.js=, as there is a single entry point inside =src/assets/=. (=src/assets/index.js=) If there are more than one entry points more files generated as well as an additional file =common.js=, which contains shared code across all entry points. =common.js= must be loaded before you load an entry point. You can see what gets generated by running the =build:dev= / =build:prod= task. (see the [[#tasks][tasks section]])
*** Other Files
**** =*.test.ts=, =*.test.tsx=
Tests for components/domains/logic/etc. If code needs to be run before tests are executed see =setup-tests.ts= Some guides on tests include:
- [[https://facebook.github.io/jest/docs/api.html][Jest]]
**** =__snapshots__=
Generated files/directories when using Jest's [[https://facebook.github.io/jest/docs/tutorial-react.html#snapshot-testing][snapshot feature]]. These files should be left to Jest and not touched manually.

^{[[#typo-typescript-boilerplate][Back to top]]}

** Tasks
Tasks can be executed in the following manner:
#+BEGIN_EXAMPLE
npm run [command]  # npm
yarn run [command] # Yarn
#+END_EXAMPLE
Examples:
#+BEGIN_EXAMPLE
npm run server
yarn run lint
#+END_EXAMPLE
*** =start=
Alias for =build:prod=.
*** =server=
Alias for =server:hot=.
*** =server:hot=
Start a local development server with hot reloading. To override the port change the environment variable =PORT=. The following is provided:
- [[https://webpack.js.org/concepts/hot-module-replacement][Hot reloading]]
*** =build:dev= / =build:prod=
Build application and include assets into a packaged build in the =dist/assets/= directory. The build for =build:dev= is not minifed and includes source maps, making it ideal for development. The build for =build:prod= is minified (with dead code elimination) and does not include source maps, making it ideal for production.
*** =test= / =test:watch= / =coverage= / =coverage:watch=
Execute tests once or continuously on file changes. In addition, code coverage can be determined. For more information visit the [[https://facebook.github.io/jest/docs/configuration.html][documentation for Jest]].
*** =lint= / =lint:fix=
Check codebase against linting rules. Optionally, some errors can be fixed automatically.

^{[[#typo-typescript-boilerplate][Back to top]]}

** Project Resources
- Language
  - [[https://www.typescriptlang.org/][TypeScript]]
  - [[https://palantir.github.io/tslint/][TSLint]]
- Libraries
  - [[https://necolas.github.io/normalize.css/][normalize.css]]
- Testing
  - [[https://facebook.github.io/jest/][Jest]]
- Build Tools
  - [[https://webpack.js.org/][Webpack]]

^{[[#typo-typescript-boilerplate][Back to top]]}
